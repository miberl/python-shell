# Generated from Commands.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,129,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,
        1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,
        13,1,13,3,13,73,8,13,1,14,1,14,1,14,1,14,3,14,79,8,14,1,15,5,15,
        82,8,15,10,15,12,15,85,9,15,1,16,5,16,88,8,16,10,16,12,16,91,9,16,
        1,17,1,17,5,17,95,8,17,10,17,12,17,98,9,17,1,18,4,18,101,8,18,11,
        18,12,18,102,1,19,1,19,1,19,5,19,108,8,19,10,19,12,19,111,9,19,1,
        19,1,19,1,19,1,19,5,19,117,8,19,10,19,12,19,120,9,19,1,19,3,19,123,
        8,19,1,20,4,20,126,8,20,11,20,12,20,127,1,127,0,21,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,
        0,35,10,37,11,39,12,41,13,1,0,8,1,0,97,122,1,0,65,90,1,0,48,57,3,
        0,44,44,46,47,92,92,2,0,45,45,95,95,3,0,10,10,13,13,39,39,3,0,10,
        10,13,13,34,34,2,0,9,9,32,32,134,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,1,43,1,0,0,0,3,45,1,0,0,0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,
        0,11,54,1,0,0,0,13,56,1,0,0,0,15,58,1,0,0,0,17,60,1,0,0,0,19,62,
        1,0,0,0,21,64,1,0,0,0,23,66,1,0,0,0,25,68,1,0,0,0,27,72,1,0,0,0,
        29,78,1,0,0,0,31,83,1,0,0,0,33,89,1,0,0,0,35,92,1,0,0,0,37,100,1,
        0,0,0,39,122,1,0,0,0,41,125,1,0,0,0,43,44,5,10,0,0,44,2,1,0,0,0,
        45,46,5,59,0,0,46,4,1,0,0,0,47,48,5,124,0,0,48,6,1,0,0,0,49,50,5,
        45,0,0,50,8,1,0,0,0,51,52,5,45,0,0,52,53,5,45,0,0,53,10,1,0,0,0,
        54,55,5,60,0,0,55,12,1,0,0,0,56,57,5,62,0,0,57,14,1,0,0,0,58,59,
        5,42,0,0,59,16,1,0,0,0,60,61,5,96,0,0,61,18,1,0,0,0,62,63,7,0,0,
        0,63,20,1,0,0,0,64,65,7,1,0,0,65,22,1,0,0,0,66,67,7,2,0,0,67,24,
        1,0,0,0,68,69,7,3,0,0,69,26,1,0,0,0,70,73,3,29,14,0,71,73,7,4,0,
        0,72,70,1,0,0,0,72,71,1,0,0,0,73,28,1,0,0,0,74,79,3,19,9,0,75,79,
        3,21,10,0,76,79,3,23,11,0,77,79,3,25,12,0,78,74,1,0,0,0,78,75,1,
        0,0,0,78,76,1,0,0,0,78,77,1,0,0,0,79,30,1,0,0,0,80,82,8,5,0,0,81,
        80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,32,1,0,0,
        0,85,83,1,0,0,0,86,88,8,6,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,
        1,0,0,0,89,90,1,0,0,0,90,34,1,0,0,0,91,89,1,0,0,0,92,96,3,29,14,
        0,93,95,3,27,13,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,
        1,0,0,0,97,36,1,0,0,0,98,96,1,0,0,0,99,101,7,7,0,0,100,99,1,0,0,
        0,101,102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,38,1,0,0,0,
        104,109,5,34,0,0,105,108,3,35,17,0,106,108,3,37,18,0,107,105,1,0,
        0,0,107,106,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,
        0,0,110,112,1,0,0,0,111,109,1,0,0,0,112,123,5,34,0,0,113,118,5,39,
        0,0,114,117,3,35,17,0,115,117,3,37,18,0,116,114,1,0,0,0,116,115,
        1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,
        1,0,0,0,120,118,1,0,0,0,121,123,5,39,0,0,122,104,1,0,0,0,122,113,
        1,0,0,0,123,40,1,0,0,0,124,126,9,0,0,0,125,124,1,0,0,0,126,127,1,
        0,0,0,127,128,1,0,0,0,127,125,1,0,0,0,128,42,1,0,0,0,13,0,72,78,
        83,89,96,102,107,109,116,118,122,127,0
    ]

class CommandsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    WORD = 10
    WHITESPACE = 11
    QUOTEDTEXT = 12
    OTHER = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'\\n'", "';'", "'|'", "'-'", "'--'", "'<'", "'>'", "'*'", "'`'" ]

    symbolicNames = [ "<INVALID>",
            "WORD", "WHITESPACE", "QUOTEDTEXT", "OTHER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "LOWER", "UPPER", "NUMBER", "STARTPUNCT", 
                  "FULLCHAR", "ALPHANUM", "SINGLEQUOTEWORD", "DOUBLEQUOTEWORD", 
                  "WORD", "WHITESPACE", "QUOTEDTEXT", "OTHER" ]

    grammarFileName = "Commands.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


